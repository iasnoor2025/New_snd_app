# SND Rental React App - Project Intelligence

## Architecture Patterns

### Modular Laravel Architecture
- This application uses **Laravel Modules** for organizing code into self-contained, domain-specific modules
- Modules are located in `Modules/` directory, each with its own Controllers, Models, Services, etc.
- Cross-module services that handle operations across multiple domains are placed in `app/Services/`
- Example: `ProjectResourceService` in `app/Services/` handles resource operations across projects

### Service Organization Pattern
1. **Module-specific services**: `Modules/{ModuleName}/Services/`
2. **Cross-module services**: `app/Services/` for shared functionality
3. **Core services**: `Modules/Core/Services/` for foundational services

### Dependency Injection Pattern
- Controllers use dependency injection in constructors
- Services are injected as `protected readonly` properties
- Example pattern:
```php
public function __construct(
    protected readonly ProjectResourceService $resourceService
) {}
```

## Critical Implementation Patterns

### Frontend Form Validation
- Use Zod for schema validation in React forms
- Always submit validated data (`finalSubmissionData`) not raw `formData`
- Pattern: `dataForValidation` → validate → `finalSubmissionData` → submit

### Resource Management
- ProjectResourceService handles materials, fuel, and expenses across projects
- Located in `app/Services/ProjectResourceService.php` (cross-module service)
- Methods: `storeMaterial()`, `storeFuel()`, `storeExpense()`, `updateMaterial()`, etc.

### Module Structure
Each module follows this structure:
```
Modules/{ModuleName}/
├── Actions/          # Single-purpose business operations
├── Domain/           # Core business entities
├── Http/             # Controllers, Requests, Resources
├── Services/         # Business logic orchestration
├── Repositories/     # Data access layer
├── Routes/           # Module-specific routes
├── Providers/        # Service providers
└── database/         # Migrations, seeders
```

## Development Preferences

### Service Creation
- When creating services that operate across multiple modules, place them in `app/Services/`
- When creating module-specific services, place them in `Modules/{ModuleName}/Services/`
- Always use dependency injection in controllers

### Error Handling
- Services should include proper error handling and logging
- Use try-catch blocks for database operations
- Log errors with context for debugging

### Frontend Patterns
- Use TypeScript for all React components
- Implement proper form validation with Zod
- Use ShadCN UI components for consistency
- Follow the established component structure

## Known Issues & Solutions

### Dependency Injection Issues
- If getting "Call to a member function on null" errors, check if service injection is commented out in controller constructors
- Ensure the service class exists and is properly namespaced

### Form Submission Issues
- Always use validated data for submission, not raw form data
- Ensure proper field mapping (e.g., material_id to name)
- Include calculated fields like total_cost in submission data

## Module Routing
- Each module uses explicit URL prefixes
- Route names follow the pattern: `{module}.{action}`
- Example: ProjectManagement uses `/projects` prefix with `projects.` route names

## Technology Stack
- Laravel 12 with Laravel Modules
- React 19 with TypeScript
- Inertia.js for backend integration
- PostgreSQL database
- ShadCN UI with Tailwind CSS
- Zod for validation
- Zustand for state management
